// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String?
  phone          String?         @unique
  email_verified Boolean         @default(false)
  password       String
  role           Role            @default(USER)
  orders         Order[]
  ProductReview  ProductReview[]
  accounts       Account[]
  UserSession    Session[]
  products       Product[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserRole {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  RolePermission RolePermission[]
}

enum Role {
  USER
  ADMIN
  VENDOR
  PRODUCT_MANAGER
  CALL_CENTER
}

model RolePermission {
  id         Int      @id @default(autoincrement())
  roleId     Int
  role       UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission String
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  slug           String
  price          Int
  reduction      Int?
  isFeatured     Boolean          @default(false)
  isActive       Boolean          @default(true)
  sku            String?
  quantity       Int?
  description    String?          @db.VarChar(14000)
  seoTitle       String?
  seoDescription String?
  images         ProductImage[]
  variants       ProductVariant[]
  categories     Category[]
  Tags           Tag[]
  orderItems     OrderItem[]
  userId         Int
  user           User?            @relation(fields: [userId], references: [id])
  ProductReview  ProductReview[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  weight         Float?
  dimensions     String?
  brand          String?
  manufacturer   String?
  warranty       String?
  features       String?
}

model ProductVariant {
  id        Int            @id @default(autoincrement())
  productId Int
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String
  price     Int
  quantity  Int
  sku       String?
  images    ProductImage[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ProductImage {
  id        Int             @id @default(autoincrement())
  productId Int?
  alt       String?
  product   Product?        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantId Int?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageUrl  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Category {
  id              Int        @id @default(autoincrement())
  name            String
  slug            String
  parent          Category?  @relation("ChildCategories", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId        Int?
  products        Product[]
  imageUrl        String?
  childCategories Category[] @relation("ChildCategories")
  isEnabled       Boolean    @default(false)
  seoTitle        String?
  seoDescription  String?
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String
  products Product[]
}

model Brand {
  id             Int     @id @default(autoincrement())
  name           String?
  slug           String  @unique
  website        String?
  image          String?
  description    String?
  position       String  @default("0")
  isEnabled      Boolean @default(false)
  seoTitle       String?
  seoDescription String?
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  userId    Int?
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  items     OrderItem[]
  total     Int?
  status    String      @default("pending")
  paymentId String?
  name      String?
  phone     String?
  supPhone  String?
  address   String?
  code      String?
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  unitPrice  Float
  totalPrice Float
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Page {
  id        Int      @id @default(autoincrement())
  slug      String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
